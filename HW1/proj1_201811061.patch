diff --git a/Makefile b/Makefile
index 2562280..ae2bcf6 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,11 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_bench1\
+	_bench2\
+	_bench3\
+	_bench4\
+	_bench5\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +222,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
diff --git a/param.h b/param.h
index a7e90ef..5524470 100644
--- a/param.h
+++ b/param.h
@@ -1,7 +1,7 @@
 #define NPROC        64  // maximum number of processes
 #define KSTACKSIZE 4096  // size of per-process kernel stack
 #define NCPU          8  // maximum number of CPUs
-#define NOFILE       16  // open files per process
+#define NOFILE       64  // open files per process
 #define NFILE       100  // open files per system
 #define NINODE       50  // maximum number of active i-nodes
 #define NDEV         10  // maximum major device number
diff --git a/proc.c b/proc.c
index 806b1b1..b4a5a14 100644
--- a/proc.c
+++ b/proc.c
@@ -14,6 +14,38 @@ struct {
 
 static struct proc *initproc;
 
+// global queue (djp)
+struct proc* queue[3][NPROC]; // 0 : top, 1 : middle, 2 : bottom
+int top_idx = 0; // enqueue index in top
+int mid_idx = 0; // enqueue index in mid
+int bot_idx = 0; // enqueue index in bot
+
+void enqueue(int level, struct proc* p){ // enqueue in queue
+  int queue_idx;
+  if(level == 0) queue_idx = top_idx;
+  else if(level == 1) queue_idx = mid_idx;
+  else queue_idx = bot_idx;
+  queue[level][queue_idx] = p;
+  if(level == 0) top_idx++;
+  if(level == 1) mid_idx++;
+  if(level == 2) bot_idx++;
+}
+
+void dequeue(int level, int idx){ // dequeue in queue 
+  queue[level][idx] = 0;
+  int queue_idx;
+  if(level == 0) queue_idx = top_idx;
+  else if(level == 1) queue_idx = mid_idx;
+  else queue_idx = bot_idx;
+  for(int k = idx; k < queue_idx; k++){
+    queue[level][k] = queue[level][k+1];
+  }
+  queue[level][queue_idx] = 0;
+  if(level == 0) top_idx--;
+  if(level == 1) mid_idx--;
+  if(level == 2) bot_idx--;
+}
+
 int nextpid = 1;
 extern void forkret(void);
 extern void trapret(void);
@@ -88,6 +120,11 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  // init (djp)
+  p->tick_remain = 1;
+  p->level = 0;
+  enqueue(0, p); // enqueue in top
+  
 
   release(&ptable.lock);
 
@@ -332,23 +369,92 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
+    int i, j;
+    for(i = 0; i < 3; i++){
+      for(j = 0; j < NPROC; j++){
+        if(queue[i][j] == 0){
+          continue;
+        }
+        if(queue[i][j]->state != RUNNABLE){
+          continue;
+        }
+        
+        p = queue[i][j];
+
+        c->proc = p;
+        switchuvm(p);
+        p->state = RUNNING;
+        p->tick_remain--;  
+        //cprintf("context swtch\n");
+        swtch(&(c->scheduler), p->context);
+        switchkvm();
+
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        c->proc = 0;
+
+        if(p->state != RUNNABLE){ // if process is not runnable, set tick_remain again
+          if(p->level == 0){
+            p->tick_remain = 1;
+          }
+          if(p->level == 1){
+            p->tick_remain = 4;
+          }
+          if(p->level == 2){
+            p->tick_remain = 16;
+          }
+        }
+        if(p->killed == 0){ // if process is not killed, scheduler need to exec this process again
+          if(i == 0 && p->tick_remain == 0){ // process use all tick remian in top queue
+            p->tick_remain = 4; // this process go to middle queue
+            p->level++;
+            dequeue(0, j); // dequeue in top
+            enqueue(1, p); // enqueue in mid
+            j = -1; // search again in same queue
+          }
+          else if(i == 1 && p->tick_remain > 0){ // process still in mid queue
+            j--; // this process use cpu for 4 ticks
+            if(top_idx != 0){ // top queue have process
+              i = 0;
+              j = -1;
+            }
+          }
+          else if(i == 1 && p->tick_remain == 0){ // process use all tick remain in mid queue
+            p->tick_remain = 16; // this process go to bottom queue
+            p->level++;
+            dequeue(1, j); // dequeue in mid
+            enqueue(2, p); // enqueue in bot
+            j = -1; // search again in same queue
+            if(top_idx != 0){ // top queue have process
+              i = 0;
+            }
+          }
+          else if(i == 2 && p->tick_remain > 0){ // process still in bot queue
+            j--; // this process use cpu for 16 ticks
+            if(top_idx != 0){ // top queue have process
+              i = 0;
+              j = -1;
+            }
+            else if(mid_idx != 0){ // mid queue have process
+              i = 1;
+              j = -1;
+            }
+          }
+          else if(i == 2 && p->tick_remain == 0){ // process use all tick remain in bot queue
+            p->tick_remain = 16;
+            dequeue(2, j); // dequeue in bot
+            bot_idx++;
+            queue[2][bot_idx] = p; // enqueue in bot (its little bit different with enqueue fuction)
+            j = -1;
+            if(top_idx != 0){ // top queue have process
+              i = 0;
+            }
+            else if(mid_idx != 0){ // mid queue have process
+              i = 1;
+            }
+          }
+        }
+      }
     }
     release(&ptable.lock);
 
diff --git a/proc.h b/proc.h
index 1647114..a0a779b 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tick_remain;             // tick remaining
+  int level;                   // queue level
 };
 
 // Process memory is laid out contiguously, low addresses first:
